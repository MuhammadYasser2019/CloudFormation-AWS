Description: >
    Muhammad Yasser / Udacity Nanodegree
    This is a template for creating a VPC

Parameters: 

    EnvironmentName: 
        Description: A name that will be listed with any created Resources
        Type: String

    ManagedPolicyForS3: 
        Description: The ARN for S3 Read Only Access
        Type: String
  
Resources:

    ProfileWithRolesForOurApp:
      DependsOn: UdacityS3ReadOnlyEC2
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Roles:
          - !Ref UdacityS3ReadOnlyEC2
        
    UdacityS3ReadOnlyEC2:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /
          ManagedPolicyArns:
            - !Ref ManagedPolicyForS3

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to the load balancer
            VpcId:
                Fn::ImportValue:
                  Fn::Sub: "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to the the web server ports and ssh 
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip
        ImageId: ami-0ac73f33a1888c64a
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        # KeyName: Udacity-us-west-2
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: t3.small
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
    
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue:
                !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '4'
            TargetGroupARNs: 
            - Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          SecurityGroups:
          - Ref: LBSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
              Ref: WebAppLB
          Port: '80'
          Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 35
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          # Increase the timeout for the project initiation
          HealthCheckTimeoutSeconds: 30
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
              Fn::ImportValue:
                Fn::Sub: "${EnvironmentName}-VPCID"

Outputs: 

    LoadBalancer: 
        Description: A reference to the load balancer
        Value: 
          Fn::GetAtt: [ WebAppLB, DNSName ]
        Export:
          Name: !Sub ${EnvironmentName}-LBURL
  

